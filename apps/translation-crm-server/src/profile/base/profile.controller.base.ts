/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ProfileService } from "../profile.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ProfileCreateInput } from "./ProfileCreateInput";
import { Profile } from "./Profile";
import { ProfileFindManyArgs } from "./ProfileFindManyArgs";
import { ProfileWhereUniqueInput } from "./ProfileWhereUniqueInput";
import { ProfileUpdateInput } from "./ProfileUpdateInput";
import { RateFindManyArgs } from "../../rate/base/RateFindManyArgs";
import { Rate } from "../../rate/base/Rate";
import { RateWhereUniqueInput } from "../../rate/base/RateWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ProfileControllerBase {
  constructor(
    protected readonly service: ProfileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Profile })
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createProfile(
    @common.Body() data: ProfileCreateInput
  ): Promise<Profile> {
    return await this.service.createProfile({
      data: data,
      select: {
        capacity: true,
        certification: true,
        country: true,
        createdAt: true,
        email: true,
        experienceInField: true,
        firstname: true,
        haveWorkedWithClient: true,
        haveWorkedWithMls: true,
        id: true,
        interpretationMethod: true,
        interpretationType: true,
        lastname: true,
        mileage: true,
        minimumHours: true,
        nativeLanguages: true,
        notes: true,
        paymentMethods: true,
        phone: true,
        preference: true,
        rateOtherComments: true,
        ratePerHour: true,
        ratePerWordBySource: true,
        ratePerWordByTarget: true,
        sourceLanguages: true,
        state: true,
        targetLanguages: true,
        tmFields: true,
        updatedAt: true,
        zipCode: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Profile] })
  @ApiNestedQuery(ProfileFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async profiles(@common.Req() request: Request): Promise<Profile[]> {
    const args = plainToClass(ProfileFindManyArgs, request.query);
    return this.service.profiles({
      ...args,
      select: {
        capacity: true,
        certification: true,
        country: true,
        createdAt: true,
        email: true,
        experienceInField: true,
        firstname: true,
        haveWorkedWithClient: true,
        haveWorkedWithMls: true,
        id: true,
        interpretationMethod: true,
        interpretationType: true,
        lastname: true,
        mileage: true,
        minimumHours: true,
        nativeLanguages: true,
        notes: true,
        paymentMethods: true,
        phone: true,
        preference: true,
        rateOtherComments: true,
        ratePerHour: true,
        ratePerWordBySource: true,
        ratePerWordByTarget: true,
        sourceLanguages: true,
        state: true,
        targetLanguages: true,
        tmFields: true,
        updatedAt: true,
        zipCode: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Profile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async profile(
    @common.Param() params: ProfileWhereUniqueInput
  ): Promise<Profile | null> {
    const result = await this.service.profile({
      where: params,
      select: {
        capacity: true,
        certification: true,
        country: true,
        createdAt: true,
        email: true,
        experienceInField: true,
        firstname: true,
        haveWorkedWithClient: true,
        haveWorkedWithMls: true,
        id: true,
        interpretationMethod: true,
        interpretationType: true,
        lastname: true,
        mileage: true,
        minimumHours: true,
        nativeLanguages: true,
        notes: true,
        paymentMethods: true,
        phone: true,
        preference: true,
        rateOtherComments: true,
        ratePerHour: true,
        ratePerWordBySource: true,
        ratePerWordByTarget: true,
        sourceLanguages: true,
        state: true,
        targetLanguages: true,
        tmFields: true,
        updatedAt: true,
        zipCode: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Profile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateProfile(
    @common.Param() params: ProfileWhereUniqueInput,
    @common.Body() data: ProfileUpdateInput
  ): Promise<Profile | null> {
    try {
      return await this.service.updateProfile({
        where: params,
        data: data,
        select: {
          capacity: true,
          certification: true,
          country: true,
          createdAt: true,
          email: true,
          experienceInField: true,
          firstname: true,
          haveWorkedWithClient: true,
          haveWorkedWithMls: true,
          id: true,
          interpretationMethod: true,
          interpretationType: true,
          lastname: true,
          mileage: true,
          minimumHours: true,
          nativeLanguages: true,
          notes: true,
          paymentMethods: true,
          phone: true,
          preference: true,
          rateOtherComments: true,
          ratePerHour: true,
          ratePerWordBySource: true,
          ratePerWordByTarget: true,
          sourceLanguages: true,
          state: true,
          targetLanguages: true,
          tmFields: true,
          updatedAt: true,
          zipCode: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Profile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteProfile(
    @common.Param() params: ProfileWhereUniqueInput
  ): Promise<Profile | null> {
    try {
      return await this.service.deleteProfile({
        where: params,
        select: {
          capacity: true,
          certification: true,
          country: true,
          createdAt: true,
          email: true,
          experienceInField: true,
          firstname: true,
          haveWorkedWithClient: true,
          haveWorkedWithMls: true,
          id: true,
          interpretationMethod: true,
          interpretationType: true,
          lastname: true,
          mileage: true,
          minimumHours: true,
          nativeLanguages: true,
          notes: true,
          paymentMethods: true,
          phone: true,
          preference: true,
          rateOtherComments: true,
          ratePerHour: true,
          ratePerWordBySource: true,
          ratePerWordByTarget: true,
          sourceLanguages: true,
          state: true,
          targetLanguages: true,
          tmFields: true,
          updatedAt: true,
          zipCode: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/rates")
  @ApiNestedQuery(RateFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Rate",
    action: "read",
    possession: "any",
  })
  async findRates(
    @common.Req() request: Request,
    @common.Param() params: ProfileWhereUniqueInput
  ): Promise<Rate[]> {
    const query = plainToClass(RateFindManyArgs, request.query);
    const results = await this.service.findRates(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        minimumHours: true,
        perHour: true,
        perWordBySource: true,
        perWordByTarget: true,

        profile: {
          select: {
            id: true,
          },
        },

        travelAllowance: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rates")
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "update",
    possession: "any",
  })
  async connectRates(
    @common.Param() params: ProfileWhereUniqueInput,
    @common.Body() body: RateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rates: {
        connect: body,
      },
    };
    await this.service.updateProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rates")
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "update",
    possession: "any",
  })
  async updateRates(
    @common.Param() params: ProfileWhereUniqueInput,
    @common.Body() body: RateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rates: {
        set: body,
      },
    };
    await this.service.updateProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rates")
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "update",
    possession: "any",
  })
  async disconnectRates(
    @common.Param() params: ProfileWhereUniqueInput,
    @common.Body() body: RateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rates: {
        disconnect: body,
      },
    };
    await this.service.updateProfile({
      where: params,
      data,
      select: { id: true },
    });
  }
}
