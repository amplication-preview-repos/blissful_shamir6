/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { EnumProfileCapacity } from "./EnumProfileCapacity";

import {
  IsEnum,
  IsOptional,
  IsDate,
  IsString,
  MaxLength,
  IsBoolean,
  IsNumber,
  Min,
  Max,
  ValidateNested,
} from "class-validator";

import { EnumProfileCertification } from "./EnumProfileCertification";
import { EnumProfileCountry } from "./EnumProfileCountry";
import { Type } from "class-transformer";
import { EnumProfileExperienceInField } from "./EnumProfileExperienceInField";
import { EnumProfileInterpretationMethod } from "./EnumProfileInterpretationMethod";
import { EnumProfileInterpretationType } from "./EnumProfileInterpretationType";
import { EnumProfileMinimumHours } from "./EnumProfileMinimumHours";
import { EnumProfilePaymentMethods } from "./EnumProfilePaymentMethods";
import { EnumProfilePreference } from "./EnumProfilePreference";
import { Rate } from "../../rate/base/Rate";
import { EnumProfileState } from "./EnumProfileState";

@ObjectType()
class Profile {
  @ApiProperty({
    required: false,
    enum: EnumProfileCapacity,
    isArray: true,
  })
  @IsEnum(EnumProfileCapacity, {
    each: true,
  })
  @IsOptional()
  @Field(() => [EnumProfileCapacity], {
    nullable: true,
  })
  capacity?: Array<"Option1">;

  @ApiProperty({
    required: false,
    enum: EnumProfileCertification,
    isArray: true,
  })
  @IsEnum(EnumProfileCertification, {
    each: true,
  })
  @IsOptional()
  @Field(() => [EnumProfileCertification], {
    nullable: true,
  })
  certification?: Array<"Option1">;

  @ApiProperty({
    required: false,
    enum: EnumProfileCountry,
  })
  @IsEnum(EnumProfileCountry)
  @IsOptional()
  @Field(() => EnumProfileCountry, {
    nullable: true,
  })
  country?: "Option1" | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email!: string | null;

  @ApiProperty({
    required: false,
    enum: EnumProfileExperienceInField,
    isArray: true,
  })
  @IsEnum(EnumProfileExperienceInField, {
    each: true,
  })
  @IsOptional()
  @Field(() => [EnumProfileExperienceInField], {
    nullable: true,
  })
  experienceInField?: Array<"Option1">;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstname!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  haveWorkedWithClient!: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  haveWorkedWithMls!: boolean | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    enum: EnumProfileInterpretationMethod,
  })
  @IsEnum(EnumProfileInterpretationMethod)
  @IsOptional()
  @Field(() => EnumProfileInterpretationMethod, {
    nullable: true,
  })
  interpretationMethod?: "Option1" | null;

  @ApiProperty({
    required: false,
    enum: EnumProfileInterpretationType,
  })
  @IsEnum(EnumProfileInterpretationType)
  @IsOptional()
  @Field(() => EnumProfileInterpretationType, {
    nullable: true,
  })
  interpretationType?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastname!: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  mileage!: boolean | null;

  @ApiProperty({
    required: false,
    enum: EnumProfileMinimumHours,
  })
  @IsEnum(EnumProfileMinimumHours)
  @IsOptional()
  @Field(() => EnumProfileMinimumHours, {
    nullable: true,
  })
  minimumHours?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  nativeLanguages!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  notes!: string | null;

  @ApiProperty({
    required: false,
    enum: EnumProfilePaymentMethods,
    isArray: true,
  })
  @IsEnum(EnumProfilePaymentMethods, {
    each: true,
  })
  @IsOptional()
  @Field(() => [EnumProfilePaymentMethods], {
    nullable: true,
  })
  paymentMethods?: Array<"Option1">;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phone!: string | null;

  @ApiProperty({
    required: false,
    enum: EnumProfilePreference,
  })
  @IsEnum(EnumProfilePreference)
  @IsOptional()
  @Field(() => EnumProfilePreference, {
    nullable: true,
  })
  preference?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  rateOtherComments!: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  ratePerHour!: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  ratePerWordBySource!: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  ratePerWordByTarget!: number | null;

  @ApiProperty({
    required: false,
    type: () => [Rate],
  })
  @ValidateNested()
  @Type(() => Rate)
  @IsOptional()
  rates?: Array<Rate>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  sourceLanguages!: string | null;

  @ApiProperty({
    required: false,
    enum: EnumProfileState,
  })
  @IsEnum(EnumProfileState)
  @IsOptional()
  @Field(() => EnumProfileState, {
    nullable: true,
  })
  state?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  targetLanguages!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  tmFields!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  zipCode!: string | null;
}

export { Profile as Profile };
