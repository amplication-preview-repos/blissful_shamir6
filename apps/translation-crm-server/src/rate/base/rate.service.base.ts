/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Rate as PrismaRate,
  Profile as PrismaProfile,
} from "@prisma/client";

export class RateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RateCountArgs, "select">): Promise<number> {
    return this.prisma.rate.count(args);
  }

  async rates(args: Prisma.RateFindManyArgs): Promise<PrismaRate[]> {
    return this.prisma.rate.findMany(args);
  }
  async rate(args: Prisma.RateFindUniqueArgs): Promise<PrismaRate | null> {
    return this.prisma.rate.findUnique(args);
  }
  async createRate(args: Prisma.RateCreateArgs): Promise<PrismaRate> {
    return this.prisma.rate.create(args);
  }
  async updateRate(args: Prisma.RateUpdateArgs): Promise<PrismaRate> {
    return this.prisma.rate.update(args);
  }
  async deleteRate(args: Prisma.RateDeleteArgs): Promise<PrismaRate> {
    return this.prisma.rate.delete(args);
  }

  async getProfile(parentId: string): Promise<PrismaProfile | null> {
    return this.prisma.rate
      .findUnique({
        where: { id: parentId },
      })
      .profile();
  }
}
